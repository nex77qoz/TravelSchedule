import SwiftUI
import UIKit

@MainActor
class TravelScheduleViewModel: ObservableObject {
    private let api = YandexScheduleAPI(apiKey: "0644a1c7-41cd-46e3-98cc-e2607268dea6")
    
    private var lastThreadUid: String?
    private var lastSearchThreadUid: String?
    private var lastCarrierCode: Int?
    
    @Published var testResults: [TestResult] = []
    @Published var isLoading: Bool = false
    @Published var errorMessage: String? = nil
    
    func runTests() {
        testResults = []
        isLoading = true
        addResult(title: "–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤", status: "üöÄ", details: "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å API...")
        Task {
            await self.runAllTests()
        }
    }
    
    private func runAllTests() async {
        do {
            try await validateAPIKey()
            try await testStationSearch()
            try await testNearestCity()
            try await testNearestTrainStation()
            try await testStationSchedule()
            try await testRouteSearch()
            try await testThreadInfo()
            try await testSpecificCarrier()
            try await testCopyright()
            addResult(title: "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ", status: "üéâ", details: "–í—Å–µ —Ç–µ—Å—Ç—ã API –∑–∞–≤–µ—Ä—à–µ–Ω—ã")
        } catch {
            addResult(title: "–û—à–∏–±–∫–∞", status: "‚ùå", details: "\(error.localizedDescription)")
            errorMessage = "\(error.localizedDescription)"
        }
        isLoading = false
    }
    
    private func validateAPIKey() async throws {
        addResult(title: "–ü—Ä–æ–≤–µ—Ä–∫–∞ API-–∫–ª—é—á–∞", status: "‚è±Ô∏è", details: "–ü—Ä–æ–≤–µ—Ä–∫–∞ API-–∫–ª—é—á–∞...")
        let isValid = await api.validateAPIKey()
        if isValid {
            updateLastResult(status: "‚úÖ", details: "API-–∫–ª—é—á –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω")
        } else {
            updateLastResult(status: "‚ùå", details: "–ù–µ–≤–µ—Ä–Ω—ã–π API-–∫–ª—é—á")
            throw TravelScheduleError.unauthorized
        }
    }
    
    private func testStationSearch() async throws {
        addResult(title: "–ü–æ–∏—Å–∫ —Å—Ç–∞–Ω—Ü–∏–π", status: "‚è±Ô∏è", details: "–ü–æ–∏—Å–∫ —Å—Ç–∞–Ω—Ü–∏–π –≤ –ú–æ—Å–∫–≤–µ...")
        let response = try await api.stationsService.searchStations(query: "–ú–æ—Å–∫–≤–∞")
        let stationCount = countStations(in: response)
        updateLastResult(status: "‚úÖ", details: "–ù–∞–π–¥–µ–Ω–æ \(stationCount) —Å—Ç–∞–Ω—Ü–∏–π")
    }
    
    private func countStations(in response: StationsResponse) -> Int {
        var count = 0
        if let countries = response.countries {
            for country in countries {
                for region in country.regions {
                    for settlement in region.settlements {
                        count += settlement.stations.count
                    }
                }
            }
        }
        return count
    }
    
    private func testNearestCity() async throws {
        addResult(title: "–ë–ª–∏–∂–∞–π—à–∏–π –≥–æ—Ä–æ–¥", status: "‚è±Ô∏è", details: "–ü–æ–∏—Å–∫ –±–ª–∏–∂–∞–π—à–µ–≥–æ –≥–æ—Ä–æ–¥–∞...")
        let city = try await api.settlementService.getNearestCity(lat: 50.440046, lng: 40.4882367, distance: 50)
        updateLastResult(status: "‚úÖ", details: "–ë–ª–∏–∂–∞–π—à–∏–π –≥–æ—Ä–æ–¥: \(city.title)")
    }
    
    private func testNearestTrainStation() async throws {
        addResult(title: "–ë–ª–∏–∂–∞–π—à–∏–µ —Å—Ç–∞–Ω—Ü–∏–∏", status: "‚è±Ô∏è", details: "–ü–æ–∏—Å–∫ –±–ª–∏–∂–∞–π—à–µ–π —Å—Ç–∞–Ω—Ü–∏–∏ —Ç–∏–ø–∞ train_station...")
        let response = try await api.stationsService.getNearestStations(lat: 55.75, lng: 37.62, distance: 5, transportTypes: ["train"])
        if let trainStation = response.stations.first(where: { $0.stationType == "train_station" }) {
            updateLastResult(status: "‚úÖ", details: "–ü–µ—Ä–≤–∞—è —Å—Ç–∞–Ω—Ü–∏—è —Å —Ç–∏–ø–æ–º train_station: \(trainStation.title)")
        } else {
            updateLastResult(status: "‚ùå", details: "–°—Ç–∞–Ω—Ü–∏—è —Å —Ç–∏–ø–æ–º train_station –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        }
    }
    
    private func testStationSchedule() async throws {
        addResult(title: "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å—Ç–∞–Ω—Ü–∏–∏", status: "‚è±Ô∏è", details: "–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –õ–µ–Ω–∏–Ω–≥—Ä–∞–¥—Å–∫–æ–≥–æ –≤–æ–∫–∑–∞–ª–∞...")
        let tomorrow = Calendar.current.date(byAdding: .day, value: 1, to: Date()) ?? Date()
        let tomorrowString = DateFormatter.apiDateFormatter.string(from: tomorrow)
        let schedule = try await api.scheduleService.getStationSchedule(station: "s2000005", date: tomorrowString, transportTypes: ["train"])
        updateLastResult(status: "‚úÖ", details: "–ù–∞–π–¥–µ–Ω–æ \(schedule.schedule.count) –ø–æ–µ–∑–¥–æ–≤ –¥–ª—è \(schedule.station.title)")
        if let firstTrain = schedule.schedule.first {
            lastThreadUid = firstTrain.thread.uid
        }
    }
    
    private func testRouteSearch() async throws {
        addResult(title: "–ü–æ–∏—Å–∫ –º–∞—Ä—à—Ä—É—Ç–∞", status: "‚è±Ô∏è", details: "–ü–æ–∏—Å–∫ –º–∞—Ä—à—Ä—É—Ç–æ–≤ –∏–∑ –ú–æ—Å–∫–≤—ã –≤ –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥...")
        let tomorrow = Calendar.current.date(byAdding: .day, value: 1, to: Date()) ?? Date()
        let tomorrowString = DateFormatter.apiDateFormatter.string(from: tomorrow)
        let routes = try await api.routesService.searchRoutes(from: "c213", to: "c2", date: tomorrowString, transportTypes: ["train"])
        updateLastResult(status: "‚úÖ", details: "–ù–∞–π–¥–µ–Ω–æ \(routes.segments.count) –º–∞—Ä—à—Ä—É—Ç–æ–≤ –∏–∑ \(routes.search.from.title) –≤ \(routes.search.to.title)")
        if let firstSegment = routes.segments.first {
            lastSearchThreadUid = firstSegment.thread.uid
            addResult(title: "UID –º–∞—Ä—à—Ä—É—Ç–∞", status: "‚ÑπÔ∏è", details: "UID –ø–µ—Ä–≤–æ–≥–æ thread: \(firstSegment.thread.uid)")
            lastThreadUid = firstSegment.thread.uid
        }
    }
    
    private func testThreadInfo() async throws {
        guard let uid = lastThreadUid else {
            addResult(title: "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∏—Ç–∫–µ", status: "‚ùå", details: "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å uid –Ω–∏—Ç–∫–∏")
            return
        }
        addResult(title: "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∏—Ç–∫–µ", status: "‚è±Ô∏è", details: "–ü–æ–ª—É—á–µ–Ω uid –Ω–∏—Ç–∫–∏: \(uid). –ó–∞–ø—Ä–æ—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –Ω–∏—Ç–∫–µ...")
        let threadResponse = try await api.threadService.getThreadInfo(uid: uid)
        updateLastResult(status: "‚úÖ", details: "–ü–æ–µ–∑–¥ \(threadResponse.thread.title) –∏–º–µ–µ—Ç \(threadResponse.stops.count) –æ—Å—Ç–∞–Ω–æ–≤–æ–∫. JSON —Ñ–∞–π–ª –ø–æ–ª—É—á–µ–Ω.")
        lastCarrierCode = threadResponse.thread.carrier.code
    }
    
    private func testSpecificCarrier() async throws {
        guard let carrierCode = lastCarrierCode else {
            addResult(title: "–ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø–µ—Ä–µ–≤–æ–∑—á–∏–∫", status: "‚ùå", details: "–ö–æ–¥ –ø–µ—Ä–µ–≤–æ–∑—á–∏–∫–∞ –Ω–µ –ø–æ–ª—É—á–µ–Ω –∏–∑ –∑–∞–ø—Ä–æ—Å–∞.")
            return
        }
        addResult(title: "–ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø–µ—Ä–µ–≤–æ–∑—á–∏–∫", status: "‚è±Ô∏è", details: "–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–µ—Ä–µ–≤–æ–∑—á–∏–∫–∞ —Å –∫–æ–¥–æ–º \(carrierCode)...")
        let carrier = try await api.carrierService.getCarrierById(code: carrierCode)
        updateLastResult(status: "‚úÖ", details: "–ü–æ–ª—É—á–µ–Ω –ø–µ—Ä–µ–≤–æ–∑—á–∏–∫: \(carrier.title)")
    }
    
    private func testCopyright() async throws {
        addResult(title: "–ö–æ–ø–∏—Ä–∞–π—Ç –Ø–Ω–¥–µ–∫—Å –†–∞—Å–ø–∏—Å–∞–Ω–∏–π", status: "‚è±Ô∏è", details: "–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫–æ–ø–∏—Ä–∞–π—Ç–∞...")
        let copyrightResponse = try await api.copyrightService.getCopyright()
        let text = copyrightResponse.copyright.text ?? "–Ω–µ—Ç —Ç–µ–∫—Å—Ç–∞"
        updateLastResult(status: "‚úÖ", details: "–ö–æ–ø–∏—Ä–∞–π—Ç –ø–æ–ª—É—á–µ–Ω: \(text)")
    }
    
    private func addResult(title: String, status: String, details: String) {
        testResults.append(TestResult(title: title, status: status, details: details))
    }
    
    private func updateLastResult(status: String, details: String) {
        if let lastIndex = testResults.indices.last {
            let lastResult = testResults[lastIndex]
            testResults[lastIndex] = TestResult(title: lastResult.title, status: status, details: details)
        }
    }
}
