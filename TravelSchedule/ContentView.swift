import SwiftUI

struct ContentView: View {
    @StateObject private var viewModel = TravelScheduleViewModel()
    
    var body: some View {
        NavigationView {
            VStack {
                ScrollView {
                    VStack(alignment: .leading, spacing: 10) {
                        ForEach(viewModel.testResults, id: \.id) { result in
                            HStack(alignment: .top) {
                                Text(result.status)
                                    .font(.system(size: 24))
                                    .padding(.trailing, 5)
                                
                                VStack(alignment: .leading, spacing: 4) {
                                    Text(result.title)
                                        .font(.headline)
                                    
                                    if !result.details.isEmpty {
                                        Text(result.details)
                                            .font(.subheadline)
                                            .foregroundColor(.secondary)
                                    }
                                }
                            }
                            .padding(.vertical, 5)
                            
                            Divider()
                        }
                        
                        if viewModel.isLoading {
                            HStack {
                                Spacer()
                                ProgressView()
                                    .padding()
                                Spacer()
                            }
                        }
                    }
                    .padding()
                }
                
                Button(action: {
                    viewModel.runTests()
                }) {
                    HStack {
                        Image(systemName: "network")
                        Text("–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã API")
                    }
                    .frame(maxWidth: .infinity)
                    .padding()
                    .background(viewModel.isLoading ? Color.gray : Color.blue)
                    .foregroundColor(.white)
                    .cornerRadius(10)
                }
                .disabled(viewModel.isLoading)
                .padding()
            }
            .navigationTitle("–¢–µ—Å—Ç—ã API —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ø–Ω–¥–µ–∫—Å–∞")
        }
    }
}

struct TestResult: Identifiable {
    let id = UUID()
    let title: String
    let status: String // "‚úÖ", "‚ùå", "‚è±Ô∏è"
    let details: String
}

class TravelScheduleViewModel: ObservableObject {
    private let api = YandexScheduleAPI(apiKey: "0644a1c7-41cd-46e3-98cc-e2607268dea6")
    
    @Published var testResults: [TestResult] = []
    @Published var isLoading: Bool = false
    
    func runTests() {
        testResults = []
        isLoading = true
        addResult(title: "–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤", status: "üöÄ", details: "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å API...")
        
        validateAPIKey()
    }
    
    private func validateAPIKey() {
        addResult(title: "–ü—Ä–æ–≤–µ—Ä–∫–∞ API-–∫–ª—é—á–∞", status: "‚è±Ô∏è", details: "–ü—Ä–æ–≤–µ—Ä–∫–∞ API-–∫–ª—é—á–∞...")
        
        api.stationsService.getNearestStations(
            lat: 55.75,
            lng: 37.62,
            distance: 5,
            transportTypes: ["train"]
        ) { [weak self] result in
            DispatchQueue.main.async {
                guard let self = self else { return }
                
                switch result {
                case .success:
                    self.updateLastResult(status: "‚úÖ", details: "API-–∫–ª—é—á –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω")
                    self.testStationSearch()
                case .failure(let error):
                    if case .unauthorized = error {
                        self.updateLastResult(status: "‚ùå", details: "–ù–µ–≤–µ—Ä–Ω—ã–π API-–∫–ª—é—á")
                    } else {
                        self.updateLastResult(status: "‚ö†Ô∏è", details: "–í–æ–∑–º–æ–∂–Ω–æ, API-–∫–ª—é—á –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω, –Ω–æ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: \(self.formatError(error))")
                        self.testStationSearch()
                    }
                }
            }
        }
    }
    
    private func testStationSearch() {
        addResult(title: "–ü–æ–∏—Å–∫ —Å—Ç–∞–Ω—Ü–∏–∏", status: "‚è±Ô∏è", details: "–ü–æ–∏—Å–∫ —Å—Ç–∞–Ω—Ü–∏–π –≤ –ú–æ—Å–∫–≤–µ...")
        
        api.stationsService.searchStations(query: "–ú–æ—Å–∫–≤–∞") { [weak self] result in
            DispatchQueue.main.async {
                guard let self = self else { return }
                
                switch result {
                case .success(let response):
                    let stationCount = self.countStations(in: response)
                    self.updateLastResult(status: "‚úÖ", details: "–ù–∞–π–¥–µ–Ω–æ \(stationCount) —Å—Ç–∞–Ω—Ü–∏–π")
                    
                case .failure(let error):
                    self.updateLastResult(status: "‚ùå", details: "–û—à–∏–±–∫–∞: \(self.formatError(error))")
                    if case .decodingError(let err) = error {
                        print("–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è: \(err)")
                    }
                }
                
                self.testNearestStations()
            }
        }
    }
    
    private func countStations(in response: StationsResponse) -> Int {
        var count = 0
        if let countries = response.countries {
            for country in countries {
                for region in country.regions {
                    for settlement in region.settlements {
                        count += settlement.stations.count
                    }
                }
            }
        }
        return count
    }
    
    private func testNearestStations() {
        addResult(title: "–ë–ª–∏–∂–∞–π—à–∏–µ —Å—Ç–∞–Ω—Ü–∏–∏", status: "‚è±Ô∏è", details: "–ü–æ–∏—Å–∫ —Å—Ç–∞–Ω—Ü–∏–π —Ä—è–¥–æ–º —Å —Ü–µ–Ω—Ç—Ä–æ–º –ú–æ—Å–∫–≤—ã...")
        
        api.stationsService.getNearestStations(
            lat: 55.75,
            lng: 37.62,
            distance: 5,
            transportTypes: ["train"]
        ) { [weak self] result in
            DispatchQueue.main.async {
                guard let self = self else { return }
                
                switch result {
                case .success(let response):
                    self.updateLastResult(status: "‚úÖ", details: "–ù–∞–π–¥–µ–Ω–æ \(response.stations.count) –±–ª–∏–∂–∞–π—à–∏—Ö —Å—Ç–∞–Ω—Ü–∏–π")
                    
                case .failure(let error):
                    self.updateLastResult(status: "‚ùå", details: "–û—à–∏–±–∫–∞: \(self.formatError(error))")
                }
                
                self.testStationSchedule()
            }
        }
    }
    
    private func testStationSchedule() {
        addResult(title: "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å—Ç–∞–Ω—Ü–∏–∏", status: "‚è±Ô∏è", details: "–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –õ–µ–Ω–∏–Ω–≥—Ä–∞–¥—Å–∫–æ–≥–æ –≤–æ–∫–∑–∞–ª–∞...")
        
        let tomorrow = Calendar.current.date(byAdding: .day, value: 1, to: Date()) ?? Date()
        let dateFormatter = DateFormatter()
        dateFormatter.dateFormat = "yyyy-MM-dd"
        let tomorrowString = dateFormatter.string(from: tomorrow)
        
        api.scheduleService.getStationSchedule(
            station: "s9600213", // –ú–æ—Å–∫–≤–∞ (–õ–µ–Ω–∏–Ω–≥—Ä–∞–¥—Å–∫–∏–π –≤–æ–∫–∑–∞–ª)
            date: tomorrowString,
            transportTypes: ["train"]
        ) { [weak self] result in
            DispatchQueue.main.async {
                guard let self = self else { return }
                
                switch result {
                case .success(let schedule):
                    self.updateLastResult(status: "‚úÖ", details: "–ù–∞–π–¥–µ–Ω–æ \(schedule.schedule.count) –ø–æ–µ–∑–¥–æ–≤ –¥–ª—è \(schedule.station.title)")
                    
                case .failure(let error):
                    self.updateLastResult(status: "‚ùå", details: "–û—à–∏–±–∫–∞: \(self.formatError(error))")
                }
                
                self.testRouteSearch()
            }
        }
    }
    
    private func testRouteSearch() {
        addResult(title: "–ü–æ–∏—Å–∫ –º–∞—Ä—à—Ä—É—Ç–∞", status: "‚è±Ô∏è", details: "–ü–æ–∏—Å–∫ –º–∞—Ä—à—Ä—É—Ç–æ–≤ –∏–∑ –ú–æ—Å–∫–≤—ã –≤ –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥...")
        
        let tomorrow = Calendar.current.date(byAdding: .day, value: 1, to: Date()) ?? Date()
        let dateFormatter = DateFormatter()
        dateFormatter.dateFormat = "yyyy-MM-dd"
        let tomorrowString = dateFormatter.string(from: tomorrow)
        
        api.routesService.searchRoutes(
            from: "c213", // –ú–æ—Å–∫–≤–∞
            to: "c2", // –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥
            date: tomorrowString,
            transportTypes: ["train"]
        ) { [weak self] result in
            DispatchQueue.main.async {
                guard let self = self else { return }
                
                switch result {
                case .success(let routes):
                    self.updateLastResult(status: "‚úÖ", details: "–ù–∞–π–¥–µ–Ω–æ \(routes.segments.count) –º–∞—Ä—à—Ä—É—Ç–æ–≤ –∏–∑ \(routes.search.from.title) –≤ \(routes.search.to.title)")
                    
                case .failure(let error):
                    self.updateLastResult(status: "‚ùå", details: "–û—à–∏–±–∫–∞: \(self.formatError(error))")
                }
                
                self.testThreadInfo()
            }
        }
    }
    
    private func testThreadInfo() {
        addResult(title: "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–µ–∑–¥–µ", status: "‚è±Ô∏è", details: "–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–µ–∑–¥–µ...")
        
        let threadIDs = [
            "050–ß_8_2", // –°–∞–ø—Å–∞–Ω
            "030–ê_0_2", // Grand Express
            "059–ê_8_2"  // –ü—Ä–µ–º–∏—É–º –ø–æ–µ–∑–¥
        ]
        
        tryNextThreadID(threadIDs: threadIDs, index: 0)
    }

    private func tryNextThreadID(threadIDs: [String], index: Int) {
        guard index < threadIDs.count else {
            self.updateLastResult(status: "‚ùå", details: "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–µ–∑–¥–∞")
            self.testCarriersList()
            return
        }
        
        let threadID = threadIDs[index]
        
        api.threadService.getThreadInfo(uid: threadID) { [weak self] result in
            DispatchQueue.main.async {
                guard let self = self else { return }
                
                switch result {
                case .success(let thread):
                    self.updateLastResult(
                        status: "‚úÖ",
                        details: "–ü–æ–µ–∑–¥ \(thread.thread.title) –∏–º–µ–µ—Ç \(thread.stops.count) –æ—Å—Ç–∞–Ω–æ–≤–æ–∫"
                    )
                    self.testCarriersList()
                    
                case .failure:
                    self.tryNextThreadID(threadIDs: threadIDs, index: index + 1)
                }
            }
        }
    }
    
    private func testCarriersList() {
        addResult(title: "–°–ø–∏—Å–æ–∫ –ø–µ—Ä–µ–≤–æ–∑—á–∏–∫–æ–≤", status: "‚è±Ô∏è", details: "–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–µ—Ä–µ–≤–æ–∑—á–∏–∫–æ–≤...")
        
        api.carrierService.getCarriersList { [weak self] result in
            DispatchQueue.main.async {
                guard let self = self else { return }
                
                switch result {
                case .success(let carriers):
                    self.updateLastResult(
                        status: "‚úÖ",
                        details: "–ù–∞–π–¥–µ–Ω–æ \(carriers.carriers.count) –ø–µ—Ä–µ–≤–æ–∑—á–∏–∫–æ–≤"
                    )
                    
                case .failure(let error):
                    self.updateLastResult(
                        status: "‚ùå",
                        details: "–û—à–∏–±–∫–∞: \(self.formatError(error))"
                    )
                }
                
                self.testSpecificCarrier()
            }
        }
    }
    
    private func testSpecificCarrier() {
        addResult(title: "–ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø–µ—Ä–µ–≤–æ–∑—á–∏–∫", status: "‚è±Ô∏è", details: "–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –†–ñ–î...")
        
        api.carrierService.getCarrierById(code: 680) { [weak self] result in
            DispatchQueue.main.async {
                guard let self = self else { return }
                
                switch result {
                case .success(let carrier):
                    self.updateLastResult(status: "‚úÖ", details: "–ü–æ–ª—É—á–µ–Ω –ø–µ—Ä–µ–≤–æ–∑—á–∏–∫: \(carrier.title)")
                    
                case .failure(let error):
                    self.updateLastResult(status: "‚ùå", details: "–û—à–∏–±–∫–∞: \(self.formatError(error))")
                }
                
                self.addResult(title: "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ", status: "üéâ", details: "–í—Å–µ —Ç–µ—Å—Ç—ã API –∑–∞–≤–µ—Ä—à–µ–Ω—ã")
                self.isLoading = false
            }
        }
    }
    
    private func formatError(_ error: TravelScheduleError) -> String {
        switch error {
        case .invalidURL:
            return "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL"
        case .networkError(let err):
            return "–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞: \(err.localizedDescription)"
        case .decodingError(let err):
            return "–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è: \(err)"
        case .serverError(let code):
            return "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ (HTTP \(code))"
        case .noData:
            return "–î–∞–Ω–Ω—ã–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã"
        case .unauthorized:
            return "–ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω (–ø—Ä–æ–≤–µ—Ä—å—Ç–µ API-–∫–ª—é—á)"
        case .custom(let message):
            return message
        }
    }
    
    private func addResult(title: String, status: String, details: String) {
        testResults.append(TestResult(title: title, status: status, details: details))
    }
    
    private func updateLastResult(status: String, details: String) {
        guard let lastIndex = testResults.indices.last else { return }
        let lastResult = testResults[lastIndex]
        testResults[lastIndex] = TestResult(title: lastResult.title, status: status, details: details)
    }
}

struct ContentView_Previews: PreviewProvider {
    static var previews: some View {
        ContentView()
    }
}
